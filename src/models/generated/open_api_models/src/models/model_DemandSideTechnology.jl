# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DemandSideTechnology

    DemandSideTechnology(;
        min_power=nothing,
        name=nothing,
        ramp_up_percentage=nothing,
        power_systems_type=nothing,
        internal=nothing,
        price_per_unit=nothing,
        ext=nothing,
        technology_efficiency=nothing,
        ramp_dn_percentage=nothing,
        available=nothing,
    )

    - min_power::Float64 : Minimum operation of demandside unit as a fraction of total capacity
    - name::String : The technology name
    - ramp_up_percentage::Float64 : Maximum increase in output between operation periods. Fraction of total capacity
    - power_systems_type::String : maps to a valid PowerSystems.jl for PCM modeling
    - internal::InfrastructureSystemsInternal : Internal field
    - price_per_unit::Float64 : Price or value per unit of output. Ex: USD per ton of hydrogen for electrolyzers
    - ext::Dict : Option for providing additional data
    - technology_efficiency::Float64 : MWh of electricity per unit of output. Ex: MWh per ton of hydrogen for electrolyzers
    - ramp_dn_percentage::Float64 : Maximum decrease in output between operation periods. Fraction of total capacity
    - available::Bool : identifies whether the technology is available
"""
Base.@kwdef mutable struct DemandSideTechnology <: OpenAPI.APIModel
    min_power::Union{Nothing, Float64} = nothing
    name::Union{Nothing, String} = nothing
    ramp_up_percentage::Union{Nothing, Float64} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    price_per_unit::Union{Nothing, Float64} = nothing
    ext::Union{Nothing, Dict} = nothing
    technology_efficiency::Union{Nothing, Float64} = nothing
    ramp_dn_percentage::Union{Nothing, Float64} = nothing
    available::Union{Nothing, Bool} = nothing

    function DemandSideTechnology(min_power, name, ramp_up_percentage, power_systems_type, internal, price_per_unit, ext, technology_efficiency, ramp_dn_percentage, available, )
        OpenAPI.validate_property(DemandSideTechnology, Symbol("min_power"), min_power)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("name"), name)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("ramp_up_percentage"), ramp_up_percentage)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("power_systems_type"), power_systems_type)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("internal"), internal)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("price_per_unit"), price_per_unit)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("ext"), ext)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("technology_efficiency"), technology_efficiency)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("ramp_dn_percentage"), ramp_dn_percentage)
        OpenAPI.validate_property(DemandSideTechnology, Symbol("available"), available)
        return new(min_power, name, ramp_up_percentage, power_systems_type, internal, price_per_unit, ext, technology_efficiency, ramp_dn_percentage, available, )
    end
end # type DemandSideTechnology

const _property_types_DemandSideTechnology = Dict{Symbol,String}(Symbol("min_power")=>"Float64", Symbol("name")=>"String", Symbol("ramp_up_percentage")=>"Float64", Symbol("power_systems_type")=>"String", Symbol("internal")=>"InfrastructureSystemsInternal", Symbol("price_per_unit")=>"Float64", Symbol("ext")=>"Dict", Symbol("technology_efficiency")=>"Float64", Symbol("ramp_dn_percentage")=>"Float64", Symbol("available")=>"Bool", )
OpenAPI.property_type(::Type{ DemandSideTechnology }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DemandSideTechnology[name]))}

function check_required(o::DemandSideTechnology)
    o.name === nothing && (return false)
    o.power_systems_type === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DemandSideTechnology }, name::Symbol, val)
end
