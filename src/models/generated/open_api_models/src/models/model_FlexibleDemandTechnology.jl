# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""FlexibleDemandTechnology

    FlexibleDemandTechnology(;
        max_demand_delay=nothing,
        name=nothing,
        power_systems_type=nothing,
        var_cost_per_mwh=nothing,
        internal=nothing,
        ext=nothing,
        max_demand_advance=nothing,
        demand_energy_efficiency=nothing,
        available=nothing,
    )

    - max_demand_delay::Float64 : Maximum number of hours that demand can be deferred or delayed (hours).
    - name::String : The technology name
    - power_systems_type::String : maps to a valid PowerSystems.jl for PCM modeling
    - var_cost_per_mwh::PSYValueCurve : Variable operations and maintenance costs associated with flexible demand deferral
    - internal::InfrastructureSystemsInternal : Internal field
    - ext::Dict : Option for providing additional data
    - max_demand_advance::Float64 : Maximum number of hours that demand can be scheduled in advance of the original schedule (hours).
    - demand_energy_efficiency::Float64 : Energy efficiency associated with time shifting demand. Represents energy losses due to time shifting
    - available::Bool : identifies whether the technology is available
"""
Base.@kwdef mutable struct FlexibleDemandTechnology <: OpenAPI.APIModel
    max_demand_delay::Union{Nothing, Float64} = nothing
    name::Union{Nothing, String} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    var_cost_per_mwh = nothing # spec type: Union{ Nothing, PSYValueCurve }
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    ext::Union{Nothing, Dict} = nothing
    max_demand_advance::Union{Nothing, Float64} = nothing
    demand_energy_efficiency::Union{Nothing, Float64} = nothing
    available::Union{Nothing, Bool} = nothing

    function FlexibleDemandTechnology(
        max_demand_delay,
        name,
        power_systems_type,
        var_cost_per_mwh,
        internal,
        ext,
        max_demand_advance,
        demand_energy_efficiency,
        available,
    )
        OpenAPI.validate_property(
            FlexibleDemandTechnology,
            Symbol("max_demand_delay"),
            max_demand_delay,
        )
        OpenAPI.validate_property(FlexibleDemandTechnology, Symbol("name"), name)
        OpenAPI.validate_property(
            FlexibleDemandTechnology,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(
            FlexibleDemandTechnology,
            Symbol("var_cost_per_mwh"),
            var_cost_per_mwh,
        )
        OpenAPI.validate_property(FlexibleDemandTechnology, Symbol("internal"), internal)
        OpenAPI.validate_property(FlexibleDemandTechnology, Symbol("ext"), ext)
        OpenAPI.validate_property(
            FlexibleDemandTechnology,
            Symbol("max_demand_advance"),
            max_demand_advance,
        )
        OpenAPI.validate_property(
            FlexibleDemandTechnology,
            Symbol("demand_energy_efficiency"),
            demand_energy_efficiency,
        )
        OpenAPI.validate_property(FlexibleDemandTechnology, Symbol("available"), available)
        return new(
            max_demand_delay,
            name,
            power_systems_type,
            var_cost_per_mwh,
            internal,
            ext,
            max_demand_advance,
            demand_energy_efficiency,
            available,
        )
    end
end # type FlexibleDemandTechnology

const _property_types_FlexibleDemandTechnology = Dict{Symbol, String}(
    Symbol("max_demand_delay") => "Float64",
    Symbol("name") => "String",
    Symbol("power_systems_type") => "String",
    Symbol("var_cost_per_mwh") => "PSYValueCurve",
    Symbol("internal") => "InfrastructureSystemsInternal",
    Symbol("ext") => "Dict",
    Symbol("max_demand_advance") => "Float64",
    Symbol("demand_energy_efficiency") => "Float64",
    Symbol("available") => "Bool",
)
OpenAPI.property_type(::Type{FlexibleDemandTechnology}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_FlexibleDemandTechnology[name]))}

function check_required(o::FlexibleDemandTechnology)
    o.name === nothing && (return false)
    o.power_systems_type === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{FlexibleDemandTechnology}, name::Symbol, val) end
