# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""Zone

    Zone(;
        name=nothing,
        internal=nothing,
        id=nothing,
        ext=nothing,
    )

    - name::String : Name of region
    - internal::InfrastructureSystemsInternal : Internal field
    - id::Int64 : A unique zone identification number (positive integer)
    - ext::Dict : Option for providing additional data
"""
Base.@kwdef mutable struct Zone <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    id::Union{Nothing, Int64} = nothing
    ext::Union{Nothing, Dict} = nothing

    function Zone(name, internal, id, ext)
        OpenAPI.validate_property(Zone, Symbol("name"), name)
        OpenAPI.validate_property(Zone, Symbol("internal"), internal)
        OpenAPI.validate_property(Zone, Symbol("id"), id)
        OpenAPI.validate_property(Zone, Symbol("ext"), ext)
        return new(name, internal, id, ext)
    end
end # type Zone

const _property_types_Zone = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("internal") => "InfrastructureSystemsInternal",
    Symbol("id") => "Int64",
    Symbol("ext") => "Dict",
)
OpenAPI.property_type(::Type{Zone}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_Zone[name]))}

function check_required(o::Zone)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{Zone}, name::Symbol, val) end
