# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""NodalACTransportTechnology

    NodalACTransportTechnology(;
        name=nothing,
        build_year=2020,
        id=nothing,
        available=nothing,
        base_power=nothing,
        power_systems_type=nothing,
        start_node=nothing,
        end_node=nothing,
        existing_line_capacity=nothing,
        capacity_limits=nothing,
        capital_cost=nothing,
        resistance=0.0,
        voltage=0.0,
        reactance=0.0,
        financial_data=nothing,
    )

    - name::String
    - build_year::Int64
    - id::Int64
    - available::Bool
    - base_power::Float64
    - power_systems_type::String
    - start_node::Int64
    - end_node::Int64
    - existing_line_capacity::Float64
    - capacity_limits::MinMax
    - capital_cost::ValueCurve
    - resistance::Float64
    - voltage::Float64
    - reactance::Float64
    - financial_data::Any
"""
Base.@kwdef mutable struct NodalACTransportTechnology <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    build_year::Union{Nothing, Int64} = 2020
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    base_power::Union{Nothing, Float64} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    start_node::Union{Nothing, Int64} = nothing
    end_node::Union{Nothing, Int64} = nothing
    existing_line_capacity::Union{Nothing, Float64} = nothing
    capacity_limits = nothing # spec type: Union{ Nothing, MinMax }
    capital_cost = nothing # spec type: Union{ Nothing, ValueCurve }
    resistance::Union{Nothing, Float64} = 0.0
    voltage::Union{Nothing, Float64} = 0.0
    reactance::Union{Nothing, Float64} = 0.0
    financial_data::Union{Nothing, Any} = nothing

    function NodalACTransportTechnology(
        name,
        build_year,
        id,
        available,
        base_power,
        power_systems_type,
        start_node,
        end_node,
        existing_line_capacity,
        capacity_limits,
        capital_cost,
        resistance,
        voltage,
        reactance,
        financial_data,
    )
        OpenAPI.validate_property(NodalACTransportTechnology, Symbol("name"), name)
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("build_year"),
            build_year,
        )
        OpenAPI.validate_property(NodalACTransportTechnology, Symbol("id"), id)
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("available"),
            available,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("base_power"),
            base_power,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("start_node"),
            start_node,
        )
        OpenAPI.validate_property(NodalACTransportTechnology, Symbol("end_node"), end_node)
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("existing_line_capacity"),
            existing_line_capacity,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("capacity_limits"),
            capacity_limits,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("capital_cost"),
            capital_cost,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("resistance"),
            resistance,
        )
        OpenAPI.validate_property(NodalACTransportTechnology, Symbol("voltage"), voltage)
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("reactance"),
            reactance,
        )
        OpenAPI.validate_property(
            NodalACTransportTechnology,
            Symbol("financial_data"),
            financial_data,
        )
        return new(
            name,
            build_year,
            id,
            available,
            base_power,
            power_systems_type,
            start_node,
            end_node,
            existing_line_capacity,
            capacity_limits,
            capital_cost,
            resistance,
            voltage,
            reactance,
            financial_data,
        )
    end
end # type NodalACTransportTechnology

const _property_types_NodalACTransportTechnology = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("build_year") => "Int64",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("base_power") => "Float64",
    Symbol("power_systems_type") => "String",
    Symbol("start_node") => "Int64",
    Symbol("end_node") => "Int64",
    Symbol("existing_line_capacity") => "Float64",
    Symbol("capacity_limits") => "MinMax",
    Symbol("capital_cost") => "ValueCurve",
    Symbol("resistance") => "Float64",
    Symbol("voltage") => "Float64",
    Symbol("reactance") => "Float64",
    Symbol("financial_data") => "Any",
)
OpenAPI.property_type(::Type{NodalACTransportTechnology}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_NodalACTransportTechnology[name]))}

function check_required(o::NodalACTransportTechnology)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{NodalACTransportTechnology}, name::Symbol, val) end
