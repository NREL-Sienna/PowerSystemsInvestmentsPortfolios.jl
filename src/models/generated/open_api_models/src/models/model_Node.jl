# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""Node

    Node(;
        name=nothing,
        uuid=nothing,
        id=nothing,
        bus_type="PQ",
    )

    - name::String
    - uuid::String
    - id::Int64
    - bus_type::String
"""
Base.@kwdef mutable struct Node <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    uuid::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    bus_type::Union{Nothing, String} = "PQ"

    function Node(name, uuid, id, bus_type)
        OpenAPI.validate_property(Node, Symbol("name"), name)
        OpenAPI.validate_property(Node, Symbol("uuid"), uuid)
        OpenAPI.validate_property(Node, Symbol("id"), id)
        OpenAPI.validate_property(Node, Symbol("bus_type"), bus_type)
        return new(name, uuid, id, bus_type)
    end
end # type Node

const _property_types_Node = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("uuid") => "String",
    Symbol("id") => "Int64",
    Symbol("bus_type") => "String",
)
OpenAPI.property_type(::Type{Node}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_Node[name]))}

function check_required(o::Node)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{Node}, name::Symbol, val)
    if name === Symbol("bus_type")
        OpenAPI.validate_param(
            name,
            "Node",
            :enum,
            val,
            ["PQ", "PV", "REF", "ISOLATED", "SLACK"],
        )
    end
end
