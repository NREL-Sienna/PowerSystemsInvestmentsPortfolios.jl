# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""AggregateTransportTechnology

    AggregateTransportTechnology(;
        name=nothing,
        id=nothing,
        available=nothing,
        base_power=nothing,
        power_systems_type=nothing,
        start_region=nothing,
        end_region=nothing,
        capacity_limits=nothing,
        capital_costs=nothing,
        line_loss=nothing,
        unit_size=nothing,
        financial_data=nothing,
    )

    - name::String
    - id::Int64
    - available::Bool
    - base_power::Float64
    - power_systems_type::String
    - start_region::Int64
    - end_region::Int64
    - capacity_limits::MinMax
    - capital_costs::ValueCurve
    - line_loss::Float64
    - unit_size::Float64
    - financial_data::Any
"""
Base.@kwdef mutable struct AggregateTransportTechnology <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    base_power::Union{Nothing, Float64} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    start_region::Union{Nothing, Int64} = nothing
    end_region::Union{Nothing, Int64} = nothing
    capacity_limits = nothing # spec type: Union{ Nothing, MinMax }
    capital_costs = nothing # spec type: Union{ Nothing, ValueCurve }
    line_loss::Union{Nothing, Float64} = nothing
    unit_size::Union{Nothing, Float64} = nothing
    financial_data::Union{Nothing, Any} = nothing

    function AggregateTransportTechnology(
        name,
        id,
        available,
        base_power,
        power_systems_type,
        start_region,
        end_region,
        capacity_limits,
        capital_costs,
        line_loss,
        unit_size,
        financial_data,
    )
        OpenAPI.validate_property(AggregateTransportTechnology, Symbol("name"), name)
        OpenAPI.validate_property(AggregateTransportTechnology, Symbol("id"), id)
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("available"),
            available,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("base_power"),
            base_power,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("start_region"),
            start_region,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("end_region"),
            end_region,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("capacity_limits"),
            capacity_limits,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("capital_costs"),
            capital_costs,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("line_loss"),
            line_loss,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("unit_size"),
            unit_size,
        )
        OpenAPI.validate_property(
            AggregateTransportTechnology,
            Symbol("financial_data"),
            financial_data,
        )
        return new(
            name,
            id,
            available,
            base_power,
            power_systems_type,
            start_region,
            end_region,
            capacity_limits,
            capital_costs,
            line_loss,
            unit_size,
            financial_data,
        )
    end
end # type AggregateTransportTechnology

const _property_types_AggregateTransportTechnology = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("base_power") => "Float64",
    Symbol("power_systems_type") => "String",
    Symbol("start_region") => "Int64",
    Symbol("end_region") => "Int64",
    Symbol("capacity_limits") => "MinMax",
    Symbol("capital_costs") => "ValueCurve",
    Symbol("line_loss") => "Float64",
    Symbol("unit_size") => "Float64",
    Symbol("financial_data") => "Any",
)
OpenAPI.property_type(::Type{AggregateTransportTechnology}, name::Symbol) = Union{
    Nothing,
    eval(Base.Meta.parse(_property_types_AggregateTransportTechnology[name])),
}

function check_required(o::AggregateTransportTechnology)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{AggregateTransportTechnology}, name::Symbol, val) end
