# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PortfolioFinancialData

    PortfolioFinancialData(;
        name=nothing,
        discount_rate=0.0,
        inflation_rate=0.0,
        interest_rate=0.0,
        base_year=nothing,
        ext=nothing,
    )

    - name::String
    - discount_rate::Float64
    - inflation_rate::Float64
    - interest_rate::Float64
    - base_year::Int64
    - ext::Any
"""
Base.@kwdef mutable struct PortfolioFinancialData <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    discount_rate::Union{Nothing, Float64} = 0.0
    inflation_rate::Union{Nothing, Float64} = 0.0
    interest_rate::Union{Nothing, Float64} = 0.0
    base_year::Union{Nothing, Int64} = nothing
    ext::Union{Nothing, Any} = nothing

    function PortfolioFinancialData(name, discount_rate, inflation_rate, interest_rate, base_year, ext, )
        OpenAPI.validate_property(PortfolioFinancialData, Symbol("name"), name)
        OpenAPI.validate_property(PortfolioFinancialData, Symbol("discount_rate"), discount_rate)
        OpenAPI.validate_property(PortfolioFinancialData, Symbol("inflation_rate"), inflation_rate)
        OpenAPI.validate_property(PortfolioFinancialData, Symbol("interest_rate"), interest_rate)
        OpenAPI.validate_property(PortfolioFinancialData, Symbol("base_year"), base_year)
        OpenAPI.validate_property(PortfolioFinancialData, Symbol("ext"), ext)
        return new(name, discount_rate, inflation_rate, interest_rate, base_year, ext, )
    end
end # type PortfolioFinancialData

const _property_types_PortfolioFinancialData = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("discount_rate")=>"Float64", Symbol("inflation_rate")=>"Float64", Symbol("interest_rate")=>"Float64", Symbol("base_year")=>"Int64", Symbol("ext")=>"Any", )
OpenAPI.property_type(::Type{ PortfolioFinancialData }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PortfolioFinancialData[name]))}

function check_required(o::PortfolioFinancialData)
    o.name === nothing && (return false)
    o.discount_rate === nothing && (return false)
    o.inflation_rate === nothing && (return false)
    o.base_year === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PortfolioFinancialData }, name::Symbol, val)






end
