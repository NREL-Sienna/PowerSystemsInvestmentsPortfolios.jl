# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""RetrofitPotential

    RetrofitPotential(;
        internal=nothing,
        retrofit_potential=nothing,
        ext=nothing,
    )

    - internal::InfrastructureSystemsInternal : Internal field
    - retrofit_potential::Vector{PSYGenerator} : Individual generation units mapped to this technology that can be retrofitted
    - ext::Dict : Option for providing additional data
"""
Base.@kwdef mutable struct RetrofitPotential <: OpenAPI.APIModel
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    retrofit_potential = nothing # spec type: Union{ Nothing, Vector{PSYGenerator} }
    ext::Union{Nothing, Dict} = nothing

    function RetrofitPotential(internal, retrofit_potential, ext)
        OpenAPI.validate_property(RetrofitPotential, Symbol("internal"), internal)
        OpenAPI.validate_property(
            RetrofitPotential,
            Symbol("retrofit_potential"),
            retrofit_potential,
        )
        OpenAPI.validate_property(RetrofitPotential, Symbol("ext"), ext)
        return new(internal, retrofit_potential, ext)
    end
end # type RetrofitPotential

const _property_types_RetrofitPotential = Dict{Symbol, String}(
    Symbol("internal") => "InfrastructureSystemsInternal",
    Symbol("retrofit_potential") => "Vector{PSYGenerator}",
    Symbol("ext") => "Dict",
)
OpenAPI.property_type(::Type{RetrofitPotential}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_RetrofitPotential[name]))}

function check_required(o::RetrofitPotential)
    o.retrofit_potential === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{RetrofitPotential}, name::Symbol, val) end
