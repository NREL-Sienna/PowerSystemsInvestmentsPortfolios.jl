# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""SupplyTechnology

    SupplyTechnology(;
        base_power=nothing,
        heat_rate_mmbtu_per_mwh=nothing,
        outage_factor=nothing,
        prime_mover_type=nothing,
        cofire_level_min=nothing,
        capital_costs=nothing,
        max_capacity=nothing,
        dn_time=nothing,
        lifetime=nothing,
        cofire_start_max=nothing,
        available=nothing,
        co2=nothing,
        cofire_start_min=nothing,
        name=nothing,
        ramp_dn_percentage=nothing,
        min_capacity=nothing,
        id=nothing,
        initial_capacity=nothing,
        financial_data=nothing,
        start_fuel_mmbtu_per_mw=nothing,
        operation_costs=nothing,
        fuel=nothing,
        power_systems_type=nothing,
        cofire_level_max=nothing,
        internal=nothing,
        ext=nothing,
        balancing_topology=nothing,
        region=nothing,
        ramp_up_percentage=nothing,
        base_year=nothing,
        unit_size=nothing,
        min_generation_percentage=nothing,
        start_cost_per_mw=nothing,
        up_time=nothing,
    )

    - base_power::Float64 : Base power
    - heat_rate_mmbtu_per_mwh::Union{Float64PSYValueCurveDict{ThermalFuelsPSYValueCurve}} : Heat rate of generator, MMBTU/MWh
    - outage_factor::Float64 : Derating factor to account for planned or forced outages of a technology
    - prime_mover_type::PrimeMovers : Prime mover for generator
    - cofire_level_min::Union{NothingDict{ThermalFuelsFloat64}} : Minimum blending level of each fuel during normal generation process for multi-fuel generator
    - capital_costs::PSYValueCurve : Capital costs for investing in a technology.
    - max_capacity::Float64 : Maximum allowable installed capacity for a technology
    - dn_time::Float64 : Minimum amount of time a resource has to remain in the shutdown state.
    - lifetime::Int : Maximum number of years a technology can be active once installed
    - cofire_start_max::Union{NothingDict{ThermalFuelsFloat64}} : Maximum blending level of each fuel during start-up process for multi-fuel generator
    - available::Bool : identifies whether the technology is available
    - co2::Union{Float64Dict{StringFloat64}Dict{ThermalFuelsFloat64}} : Carbon Intensity of fuel
    - cofire_start_min::Union{NothingDict{ThermalFuelsFloat64}} : Minimum blending level of each fuel during start-up process for multi-fuel generator
    - name::String : The technology name
    - ramp_dn_percentage::Float64 : Maximum decrease in output between operation periods. Fraction of total capacity
    - min_capacity::Float64 : Minimum required capacity for a technology
    - id::Int64 : ID for individual generator
    - initial_capacity::Float64 : Pre-existing capacity for a technology
    - financial_data::TechnologyFinancialData : Struct containing relevant financial information for a technology
    - start_fuel_mmbtu_per_mw::Float64 : Startup fuel use per MW of nameplate capacity of each generator (MMBtu/MW per start)
    - operation_costs::PSYOperationalCost : Fixed and variable O&amp;M costs for a technology
    - fuel::Union{StringThermalFuelsVector{ThermalFuels}Vector{String}} : Fuel type according to IEA
    - power_systems_type::String : maps to a valid PowerSystems.jl for PCM modeling
    - cofire_level_max::Union{NothingDict{ThermalFuelsFloat64}} : Maximum blending level of each fuel during normal generation process for multi-fuel generator
    - internal::InfrastructureSystemsInternal : Internal field
    - ext::Dict : Option for providing additional data
    - balancing_topology::String : Set of balancing nodes
    - region::Union{NothingRegionVector{Region}} : Zone where tech operates in
    - ramp_up_percentage::Float64 : Maximum increase in output between operation periods. Fraction of total capacity
    - base_year::Int : Reference year for technology data
    - unit_size::Float64 : Used for discrete investment decisions. Size of each unit being built (MW)
    - min_generation_percentage::Float64 : Minimum generation as a fraction of total capacity
    - start_cost_per_mw::Float64 : Cost per MW of nameplate capacity to start a generator (/MW per start).
    - up_time::Float64 : Minimum amount of time a resource has to stay in the committed state.
"""
Base.@kwdef mutable struct SupplyTechnology <: OpenAPI.APIModel
    base_power::Union{Nothing, Float64} = nothing
    heat_rate_mmbtu_per_mwh = nothing # spec type: Union{ Nothing, Union{Float64PSYValueCurveDict{ThermalFuelsPSYValueCurve}} }
    outage_factor::Union{Nothing, Float64} = nothing
    prime_mover_type = nothing # spec type: Union{ Nothing, PrimeMovers }
    cofire_level_min = nothing # spec type: Union{ Nothing, Union{NothingDict{ThermalFuelsFloat64}} }
    capital_costs = nothing # spec type: Union{ Nothing, PSYValueCurve }
    max_capacity::Union{Nothing, Float64} = nothing
    dn_time::Union{Nothing, Float64} = nothing
    lifetime = nothing # spec type: Union{ Nothing, Int }
    cofire_start_max = nothing # spec type: Union{ Nothing, Union{NothingDict{ThermalFuelsFloat64}} }
    available::Union{Nothing, Bool} = nothing
    co2 = nothing # spec type: Union{ Nothing, Union{Float64Dict{StringFloat64}Dict{ThermalFuelsFloat64}} }
    cofire_start_min = nothing # spec type: Union{ Nothing, Union{NothingDict{ThermalFuelsFloat64}} }
    name::Union{Nothing, String} = nothing
    ramp_dn_percentage::Union{Nothing, Float64} = nothing
    min_capacity::Union{Nothing, Float64} = nothing
    id::Union{Nothing, Int64} = nothing
    initial_capacity::Union{Nothing, Float64} = nothing
    financial_data = nothing # spec type: Union{ Nothing, TechnologyFinancialData }
    start_fuel_mmbtu_per_mw::Union{Nothing, Float64} = nothing
    operation_costs = nothing # spec type: Union{ Nothing, PSYOperationalCost }
    fuel = nothing # spec type: Union{ Nothing, Union{StringThermalFuelsVector{ThermalFuels}Vector{String}} }
    power_systems_type::Union{Nothing, String} = nothing
    cofire_level_max = nothing # spec type: Union{ Nothing, Union{NothingDict{ThermalFuelsFloat64}} }
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    ext::Union{Nothing, Dict} = nothing
    balancing_topology::Union{Nothing, String} = nothing
    region = nothing # spec type: Union{ Nothing, Union{NothingRegionVector{Region}} }
    ramp_up_percentage::Union{Nothing, Float64} = nothing
    base_year = nothing # spec type: Union{ Nothing, Int }
    unit_size::Union{Nothing, Float64} = nothing
    min_generation_percentage::Union{Nothing, Float64} = nothing
    start_cost_per_mw::Union{Nothing, Float64} = nothing
    up_time::Union{Nothing, Float64} = nothing

    function SupplyTechnology(
        base_power,
        heat_rate_mmbtu_per_mwh,
        outage_factor,
        prime_mover_type,
        cofire_level_min,
        capital_costs,
        max_capacity,
        dn_time,
        lifetime,
        cofire_start_max,
        available,
        co2,
        cofire_start_min,
        name,
        ramp_dn_percentage,
        min_capacity,
        id,
        initial_capacity,
        financial_data,
        start_fuel_mmbtu_per_mw,
        operation_costs,
        fuel,
        power_systems_type,
        cofire_level_max,
        internal,
        ext,
        balancing_topology,
        region,
        ramp_up_percentage,
        base_year,
        unit_size,
        min_generation_percentage,
        start_cost_per_mw,
        up_time,
    )
        OpenAPI.validate_property(SupplyTechnology, Symbol("base_power"), base_power)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("heat_rate_mmbtu_per_mwh"),
            heat_rate_mmbtu_per_mwh,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("outage_factor"), outage_factor)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("prime_mover_type"),
            prime_mover_type,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("cofire_level_min"),
            cofire_level_min,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("capital_costs"), capital_costs)
        OpenAPI.validate_property(SupplyTechnology, Symbol("max_capacity"), max_capacity)
        OpenAPI.validate_property(SupplyTechnology, Symbol("dn_time"), dn_time)
        OpenAPI.validate_property(SupplyTechnology, Symbol("lifetime"), lifetime)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("cofire_start_max"),
            cofire_start_max,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("available"), available)
        OpenAPI.validate_property(SupplyTechnology, Symbol("co2"), co2)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("cofire_start_min"),
            cofire_start_min,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("name"), name)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("ramp_dn_percentage"),
            ramp_dn_percentage,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("min_capacity"), min_capacity)
        OpenAPI.validate_property(SupplyTechnology, Symbol("id"), id)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("initial_capacity"),
            initial_capacity,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("financial_data"),
            financial_data,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("start_fuel_mmbtu_per_mw"),
            start_fuel_mmbtu_per_mw,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("operation_costs"),
            operation_costs,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("fuel"), fuel)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("cofire_level_max"),
            cofire_level_max,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("internal"), internal)
        OpenAPI.validate_property(SupplyTechnology, Symbol("ext"), ext)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("balancing_topology"),
            balancing_topology,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("region"), region)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("ramp_up_percentage"),
            ramp_up_percentage,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("base_year"), base_year)
        OpenAPI.validate_property(SupplyTechnology, Symbol("unit_size"), unit_size)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("min_generation_percentage"),
            min_generation_percentage,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("start_cost_per_mw"),
            start_cost_per_mw,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("up_time"), up_time)
        return new(
            base_power,
            heat_rate_mmbtu_per_mwh,
            outage_factor,
            prime_mover_type,
            cofire_level_min,
            capital_costs,
            max_capacity,
            dn_time,
            lifetime,
            cofire_start_max,
            available,
            co2,
            cofire_start_min,
            name,
            ramp_dn_percentage,
            min_capacity,
            id,
            initial_capacity,
            financial_data,
            start_fuel_mmbtu_per_mw,
            operation_costs,
            fuel,
            power_systems_type,
            cofire_level_max,
            internal,
            ext,
            balancing_topology,
            region,
            ramp_up_percentage,
            base_year,
            unit_size,
            min_generation_percentage,
            start_cost_per_mw,
            up_time,
        )
    end
end # type SupplyTechnology

const _property_types_SupplyTechnology = Dict{Symbol, String}(
    Symbol("base_power") => "Float64",
    Symbol(
        "heat_rate_mmbtu_per_mwh",
    ) => "Union{Float64PSYValueCurveDict{ThermalFuelsPSYValueCurve}}",
    Symbol("outage_factor") => "Float64",
    Symbol("prime_mover_type") => "PrimeMovers",
    Symbol("cofire_level_min") => "Union{NothingDict{ThermalFuelsFloat64}}",
    Symbol("capital_costs") => "PSYValueCurve",
    Symbol("max_capacity") => "Float64",
    Symbol("dn_time") => "Float64",
    Symbol("lifetime") => "Int",
    Symbol("cofire_start_max") => "Union{NothingDict{ThermalFuelsFloat64}}",
    Symbol("available") => "Bool",
    Symbol("co2") => "Union{Float64Dict{StringFloat64}Dict{ThermalFuelsFloat64}}",
    Symbol("cofire_start_min") => "Union{NothingDict{ThermalFuelsFloat64}}",
    Symbol("name") => "String",
    Symbol("ramp_dn_percentage") => "Float64",
    Symbol("min_capacity") => "Float64",
    Symbol("id") => "Int64",
    Symbol("initial_capacity") => "Float64",
    Symbol("financial_data") => "TechnologyFinancialData",
    Symbol("start_fuel_mmbtu_per_mw") => "Float64",
    Symbol("operation_costs") => "PSYOperationalCost",
    Symbol("fuel") => "Union{StringThermalFuelsVector{ThermalFuels}Vector{String}}",
    Symbol("power_systems_type") => "String",
    Symbol("cofire_level_max") => "Union{NothingDict{ThermalFuelsFloat64}}",
    Symbol("internal") => "InfrastructureSystemsInternal",
    Symbol("ext") => "Dict",
    Symbol("balancing_topology") => "String",
    Symbol("region") => "Union{NothingRegionVector{Region}}",
    Symbol("ramp_up_percentage") => "Float64",
    Symbol("base_year") => "Int",
    Symbol("unit_size") => "Float64",
    Symbol("min_generation_percentage") => "Float64",
    Symbol("start_cost_per_mw") => "Float64",
    Symbol("up_time") => "Float64",
)
OpenAPI.property_type(::Type{SupplyTechnology}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_SupplyTechnology[name]))}

function check_required(o::SupplyTechnology)
    o.available === nothing && (return false)
    o.name === nothing && (return false)
    o.power_systems_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{SupplyTechnology}, name::Symbol, val)
    if name === Symbol("prime_mover_type")
        OpenAPI.validate_param(
            name,
            "SupplyTechnology",
            :enum,
            val,
            [
                PrimeMovers.BT,
                PrimeMovers.CA,
                PrimeMovers.CC,
                PrimeMovers.CS,
                PrimeMovers.CT,
                PrimeMovers.FC,
                PrimeMovers.GT,
                PrimeMovers.HA,
                PrimeMovers.HB,
                PrimeMovers.HK,
                PrimeMovers.HY,
                PrimeMovers.IC,
                PrimeMovers.OT,
                PrimeMovers.ST,
                PrimeMovers.PVe,
                PrimeMovers.WT,
                PrimeMovers.WS,
            ],
        )
    end
    if name === Symbol("fuel")
        OpenAPI.validate_param(
            name,
            "SupplyTechnology",
            :enum,
            val,
            [
                ThermalFuels.COAL,
                ThermalFuels.WASTE_COAL,
                ThermalFuels.DISTILLATE_FUEL_OIL,
                ThermalFuels.WASTE_OIL,
                ThermalFuels.PETROLEUM_COKE,
                ThermalFuels.RESIDUAL_FUEL_OIL,
                ThermalFuels.NATURAL_GAS,
                ThermalFuels.OTHER_GAS,
                ThermalFuels.NUCLEAR,
                ThermalFuels.AG_BIPRODUCT,
                ThermalFuels.MUNICIPAL_WASTE,
                ThermalFuels.WOOD_WASTE,
                ThermalFuels.GEOTHERMAL,
                ThermalFuels.OTHER,
            ],
        )
    end
end
