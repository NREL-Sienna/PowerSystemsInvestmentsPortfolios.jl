# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""SupplyTechnology

    SupplyTechnology(;
        name=nothing,
        power_systems_type=nothing,
        region=nothing,
        id=nothing,
        available=nothing,
        base_power=nothing,
        prime_mover_type="OT",
        fuel=nothing,
        co2=nothing,
        cofire_start_limits=nothing,
        cofire_level_limits=nothing,
        capital_costs=nothing,
        operation_costs=nothing,
        initial_capacity=0.0,
        unit_size=0.0,
        capacity_limits=nothing,
        outage_factor=1.0,
        min_generation_fraction=0.0,
        ramp_limits=nothing,
        time_limits=nothing,
        start_fuel_mmbtu_per_mw=0.0,
        lifetime=100,
        financial_data=nothing,
    )

    - name::String
    - power_systems_type::String
    - region::Vector{Int64}
    - id::Int64
    - available::Bool
    - base_power::Float64
    - prime_mover_type::String
    - fuel::Vector{String}
    - co2::Dict{String, Float64}
    - cofire_start_limits::Dict{String, MinMax}
    - cofire_level_limits::Dict{String, MinMax}
    - capital_costs::ValueCurve
    - operation_costs::SupplyTechnologyOperationCosts
    - initial_capacity::Float64
    - unit_size::Float64
    - capacity_limits::MinMax
    - outage_factor::Float64
    - min_generation_fraction::Float64
    - ramp_limits::UpDown
    - time_limits::UpDown
    - start_fuel_mmbtu_per_mw::Float64
    - lifetime::Int64
    - financial_data::Any
"""
Base.@kwdef mutable struct SupplyTechnology <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    region::Union{Nothing, Vector{Int64}} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    base_power::Union{Nothing, Float64} = nothing
    prime_mover_type::Union{Nothing, String} = "OT"
    fuel::Union{Nothing, Vector{String}} = nothing
    co2::Union{Nothing, Dict{String, Float64}} = nothing
    cofire_start_limits::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, MinMax} }
    cofire_level_limits::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, MinMax} }
    capital_costs = nothing # spec type: Union{ Nothing, ValueCurve }
    operation_costs = nothing # spec type: Union{ Nothing, SupplyTechnologyOperationCosts }
    initial_capacity::Union{Nothing, Float64} = 0.0
    unit_size::Union{Nothing, Float64} = 0.0
    capacity_limits = nothing # spec type: Union{ Nothing, MinMax }
    outage_factor::Union{Nothing, Float64} = 1.0
    min_generation_fraction::Union{Nothing, Float64} = 0.0
    ramp_limits = nothing # spec type: Union{ Nothing, UpDown }
    time_limits = nothing # spec type: Union{ Nothing, UpDown }
    start_fuel_mmbtu_per_mw::Union{Nothing, Float64} = 0.0
    lifetime::Union{Nothing, Int64} = 100
    financial_data::Union{Nothing, Any} = nothing

    function SupplyTechnology(
        name,
        power_systems_type,
        region,
        id,
        available,
        base_power,
        prime_mover_type,
        fuel,
        co2,
        cofire_start_limits,
        cofire_level_limits,
        capital_costs,
        operation_costs,
        initial_capacity,
        unit_size,
        capacity_limits,
        outage_factor,
        min_generation_fraction,
        ramp_limits,
        time_limits,
        start_fuel_mmbtu_per_mw,
        lifetime,
        financial_data,
    )
        OpenAPI.validate_property(SupplyTechnology, Symbol("name"), name)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("region"), region)
        OpenAPI.validate_property(SupplyTechnology, Symbol("id"), id)
        OpenAPI.validate_property(SupplyTechnology, Symbol("available"), available)
        OpenAPI.validate_property(SupplyTechnology, Symbol("base_power"), base_power)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("prime_mover_type"),
            prime_mover_type,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("fuel"), fuel)
        OpenAPI.validate_property(SupplyTechnology, Symbol("co2"), co2)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("cofire_start_limits"),
            cofire_start_limits,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("cofire_level_limits"),
            cofire_level_limits,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("capital_costs"), capital_costs)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("operation_costs"),
            operation_costs,
        )
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("initial_capacity"),
            initial_capacity,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("unit_size"), unit_size)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("capacity_limits"),
            capacity_limits,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("outage_factor"), outage_factor)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("min_generation_fraction"),
            min_generation_fraction,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("ramp_limits"), ramp_limits)
        OpenAPI.validate_property(SupplyTechnology, Symbol("time_limits"), time_limits)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("start_fuel_mmbtu_per_mw"),
            start_fuel_mmbtu_per_mw,
        )
        OpenAPI.validate_property(SupplyTechnology, Symbol("lifetime"), lifetime)
        OpenAPI.validate_property(
            SupplyTechnology,
            Symbol("financial_data"),
            financial_data,
        )
        return new(
            name,
            power_systems_type,
            region,
            id,
            available,
            base_power,
            prime_mover_type,
            fuel,
            co2,
            cofire_start_limits,
            cofire_level_limits,
            capital_costs,
            operation_costs,
            initial_capacity,
            unit_size,
            capacity_limits,
            outage_factor,
            min_generation_fraction,
            ramp_limits,
            time_limits,
            start_fuel_mmbtu_per_mw,
            lifetime,
            financial_data,
        )
    end
end # type SupplyTechnology

const _property_types_SupplyTechnology = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("power_systems_type") => "String",
    Symbol("region") => "Vector{Int64}",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("base_power") => "Float64",
    Symbol("prime_mover_type") => "String",
    Symbol("fuel") => "Vector{String}",
    Symbol("co2") => "Dict{String, Float64}",
    Symbol("cofire_start_limits") => "Dict{String, MinMax}",
    Symbol("cofire_level_limits") => "Dict{String, MinMax}",
    Symbol("capital_costs") => "ValueCurve",
    Symbol("operation_costs") => "SupplyTechnologyOperationCosts",
    Symbol("initial_capacity") => "Float64",
    Symbol("unit_size") => "Float64",
    Symbol("capacity_limits") => "MinMax",
    Symbol("outage_factor") => "Float64",
    Symbol("min_generation_fraction") => "Float64",
    Symbol("ramp_limits") => "UpDown",
    Symbol("time_limits") => "UpDown",
    Symbol("start_fuel_mmbtu_per_mw") => "Float64",
    Symbol("lifetime") => "Int64",
    Symbol("financial_data") => "Any",
)
OpenAPI.property_type(::Type{SupplyTechnology}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_SupplyTechnology[name]))}

function check_required(o::SupplyTechnology)
    o.name === nothing && (return false)
    o.power_systems_type === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{SupplyTechnology}, name::Symbol, val)
    if name === Symbol("prime_mover_type")
        OpenAPI.validate_param(
            name,
            "SupplyTechnology",
            :enum,
            val,
            [
                "BA",
                "BT",
                "CA",
                "CC",
                "CE",
                "CP",
                "CS",
                "CT",
                "ES",
                "FC",
                "FW",
                "GT",
                "HA",
                "HB",
                "HK",
                "HY",
                "IC",
                "PS",
                "OT",
                "ST",
                "PVe",
                "WT",
                "WS",
            ],
        )
    end

    if name === Symbol("fuel")
        OpenAPI.validate_param(
            name,
            "SupplyTechnology",
            :enum,
            val,
            [
                "COAL",
                "WASTE_COAL",
                "DISTILLATE_FUEL_OIL",
                "WASTE_OIL",
                "PETROLEUM_COKE",
                "RESIDUAL_FUEL_OIL",
                "NATURAL_GAS",
                "OTHER_GAS",
                "NUCLEAR",
                "AG_BIPRODUCT",
                "MUNICIPAL_WASTE",
                "WOOD_WASTE",
                "GEOTHERMAL",
                "OTHER",
            ],
        )
    end
end
