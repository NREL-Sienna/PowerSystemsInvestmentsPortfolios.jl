# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""HourlyMatching

    HourlyMatching(;
        name=nothing,
        id=nothing,
        available=nothing,
        qualified_supply=nothing,
        qualified_demand=nothing,
        generation_fraction=1e8,
    )

    - name::String
    - id::Int64
    - available::Bool
    - qualified_supply::Vector{Int64}
    - qualified_demand::Vector{Int64}
    - generation_fraction::Float64
"""
Base.@kwdef mutable struct HourlyMatching <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    qualified_supply::Union{Nothing, Vector{Int64}} = nothing
    qualified_demand::Union{Nothing, Vector{Int64}} = nothing
    generation_fraction::Union{Nothing, Float64} = 1e8

    function HourlyMatching(
        name,
        id,
        available,
        qualified_supply,
        qualified_demand,
        generation_fraction,
    )
        OpenAPI.validate_property(HourlyMatching, Symbol("name"), name)
        OpenAPI.validate_property(HourlyMatching, Symbol("id"), id)
        OpenAPI.validate_property(HourlyMatching, Symbol("available"), available)
        OpenAPI.validate_property(
            HourlyMatching,
            Symbol("qualified_supply"),
            qualified_supply,
        )
        OpenAPI.validate_property(
            HourlyMatching,
            Symbol("qualified_demand"),
            qualified_demand,
        )
        OpenAPI.validate_property(
            HourlyMatching,
            Symbol("generation_fraction"),
            generation_fraction,
        )
        return new(
            name,
            id,
            available,
            qualified_supply,
            qualified_demand,
            generation_fraction,
        )
    end
end # type HourlyMatching

const _property_types_HourlyMatching = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("qualified_supply") => "Vector{Int64}",
    Symbol("qualified_demand") => "Vector{Int64}",
    Symbol("generation_fraction") => "Float64",
)
OpenAPI.property_type(::Type{HourlyMatching}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_HourlyMatching[name]))}

function check_required(o::HourlyMatching)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{HourlyMatching}, name::Symbol, val) end
