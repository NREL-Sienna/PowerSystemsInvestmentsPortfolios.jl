# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TransportTechnology

    TransportTechnology(;
        capital_cost=nothing,
        start_region=nothing,
        available=nothing,
        name=nothing,
        capital_recovery_factor=nothing,
        end_region=nothing,
        power_systems_type=nothing,
        angle_limit=nothing,
        internal=nothing,
        ext=nothing,
        resistance=nothing,
        voltage=nothing,
        network_id=nothing,
        maximum_new_capacity=nothing,
        existing_line_capacity=nothing,
        wacc=nothing,
        line_loss=nothing,
    )

    - capital_cost::PSYValueCurve : Cost of adding new capacity to the inter-regional transmission line.
    - start_region::Int64 : Start region for transport technology
    - available::Bool : identifies whether the technology is available
    - name::String : Name
    - capital_recovery_factor::Int64 : Capital recovery period (in years) used for determining overnight capital costs from annualized investment costs for network transmission line expansion.
    - end_region::Int64 : End region for transport technology
    - power_systems_type::String : maps to a valid PowerSystems.jl for PCM modeling
    - angle_limit::Float64 : Votlage angle limit (radians)
    - internal::InfrastructureSystemsInternal : Internal field
    - ext::Dict : Option for providing additional data
    - resistance::Float64 : Technology resistance in Ohms
    - voltage::Float64 : Technology resistance in Ohms
    - network_id::Int64 : Numerical Index
    - maximum_new_capacity::Float64 : Maximum capacity that can be added to transmission line (MW)
    - existing_line_capacity::Float64 : Existing capacity of transport technology (MW)
    - wacc::Float64 : Weighted average cost of capital
    - line_loss::Float64 : Transmission loss for each transport technology (%)
"""
Base.@kwdef mutable struct TransportTechnology <: OpenAPI.APIModel
    capital_cost = nothing # spec type: Union{ Nothing, PSYValueCurve }
    start_region::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    capital_recovery_factor::Union{Nothing, Int64} = nothing
    end_region::Union{Nothing, Int64} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    angle_limit::Union{Nothing, Float64} = nothing
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    ext::Union{Nothing, Dict} = nothing
    resistance::Union{Nothing, Float64} = nothing
    voltage::Union{Nothing, Float64} = nothing
    network_id::Union{Nothing, Int64} = nothing
    maximum_new_capacity::Union{Nothing, Float64} = nothing
    existing_line_capacity::Union{Nothing, Float64} = nothing
    wacc::Union{Nothing, Float64} = nothing
    line_loss::Union{Nothing, Float64} = nothing

    function TransportTechnology(capital_cost, start_region, available, name, capital_recovery_factor, end_region, power_systems_type, angle_limit, internal, ext, resistance, voltage, network_id, maximum_new_capacity, existing_line_capacity, wacc, line_loss, )
        OpenAPI.validate_property(TransportTechnology, Symbol("capital_cost"), capital_cost)
        OpenAPI.validate_property(TransportTechnology, Symbol("start_region"), start_region)
        OpenAPI.validate_property(TransportTechnology, Symbol("available"), available)
        OpenAPI.validate_property(TransportTechnology, Symbol("name"), name)
        OpenAPI.validate_property(TransportTechnology, Symbol("capital_recovery_factor"), capital_recovery_factor)
        OpenAPI.validate_property(TransportTechnology, Symbol("end_region"), end_region)
        OpenAPI.validate_property(TransportTechnology, Symbol("power_systems_type"), power_systems_type)
        OpenAPI.validate_property(TransportTechnology, Symbol("angle_limit"), angle_limit)
        OpenAPI.validate_property(TransportTechnology, Symbol("internal"), internal)
        OpenAPI.validate_property(TransportTechnology, Symbol("ext"), ext)
        OpenAPI.validate_property(TransportTechnology, Symbol("resistance"), resistance)
        OpenAPI.validate_property(TransportTechnology, Symbol("voltage"), voltage)
        OpenAPI.validate_property(TransportTechnology, Symbol("network_id"), network_id)
        OpenAPI.validate_property(TransportTechnology, Symbol("maximum_new_capacity"), maximum_new_capacity)
        OpenAPI.validate_property(TransportTechnology, Symbol("existing_line_capacity"), existing_line_capacity)
        OpenAPI.validate_property(TransportTechnology, Symbol("wacc"), wacc)
        OpenAPI.validate_property(TransportTechnology, Symbol("line_loss"), line_loss)
        return new(capital_cost, start_region, available, name, capital_recovery_factor, end_region, power_systems_type, angle_limit, internal, ext, resistance, voltage, network_id, maximum_new_capacity, existing_line_capacity, wacc, line_loss, )
    end
end # type TransportTechnology

const _property_types_TransportTechnology = Dict{Symbol,String}(Symbol("capital_cost")=>"PSYValueCurve", Symbol("start_region")=>"Int64", Symbol("available")=>"Bool", Symbol("name")=>"String", Symbol("capital_recovery_factor")=>"Int64", Symbol("end_region")=>"Int64", Symbol("power_systems_type")=>"String", Symbol("angle_limit")=>"Float64", Symbol("internal")=>"InfrastructureSystemsInternal", Symbol("ext")=>"Dict", Symbol("resistance")=>"Float64", Symbol("voltage")=>"Float64", Symbol("network_id")=>"Int64", Symbol("maximum_new_capacity")=>"Float64", Symbol("existing_line_capacity")=>"Float64", Symbol("wacc")=>"Float64", Symbol("line_loss")=>"Float64", )
OpenAPI.property_type(::Type{ TransportTechnology }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TransportTechnology[name]))}

function check_required(o::TransportTechnology)
    o.available === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ TransportTechnology }, name::Symbol, val)
end
