# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CarbonCaps

    CarbonCaps(;
        name=nothing,
        power_systems_type=nothing,
        pricecap=nothing,
        eligible_zones=nothing,
        internal=nothing,
        co_2_max_tons_mwh=nothing,
        ext=nothing,
        co_2_max_mtons=nothing,
        available=nothing,
    )

    - name::String : The technology name
    - power_systems_type::String : maps to a valid PowerSystems.jl for PCM modeling
    - pricecap::Float64 : pricecap value for carbon caps
    - eligible_zones::Vector{Int64} : List of zones that contribute to the carbon cap constraint.
    - internal::InfrastructureSystemsInternal : Internal field
    - co_2_max_tons_mwh::Float64 : Emission limit in terms of rate (tCO@/MWh)
    - ext::Dict : Option for providing additional data
    - co_2_max_mtons::Float64 : Emission limit in absolute values, in Million of tons
    - available::Bool : Availability
"""
Base.@kwdef mutable struct CarbonCaps <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    pricecap::Union{Nothing, Float64} = nothing
    eligible_zones = nothing # spec type: Union{ Nothing, Vector{Int64} }
    internal = nothing # spec type: Union{ Nothing, InfrastructureSystemsInternal }
    co_2_max_tons_mwh::Union{Nothing, Float64} = nothing
    ext::Union{Nothing, Dict} = nothing
    co_2_max_mtons::Union{Nothing, Float64} = nothing
    available::Union{Nothing, Bool} = nothing

    function CarbonCaps(name, power_systems_type, pricecap, eligible_zones, internal, co_2_max_tons_mwh, ext, co_2_max_mtons, available, )
        OpenAPI.validate_property(CarbonCaps, Symbol("name"), name)
        OpenAPI.validate_property(CarbonCaps, Symbol("power_systems_type"), power_systems_type)
        OpenAPI.validate_property(CarbonCaps, Symbol("pricecap"), pricecap)
        OpenAPI.validate_property(CarbonCaps, Symbol("eligible_zones"), eligible_zones)
        OpenAPI.validate_property(CarbonCaps, Symbol("internal"), internal)
        OpenAPI.validate_property(CarbonCaps, Symbol("co_2_max_tons_mwh"), co_2_max_tons_mwh)
        OpenAPI.validate_property(CarbonCaps, Symbol("ext"), ext)
        OpenAPI.validate_property(CarbonCaps, Symbol("co_2_max_mtons"), co_2_max_mtons)
        OpenAPI.validate_property(CarbonCaps, Symbol("available"), available)
        return new(name, power_systems_type, pricecap, eligible_zones, internal, co_2_max_tons_mwh, ext, co_2_max_mtons, available, )
    end
end # type CarbonCaps

const _property_types_CarbonCaps = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("power_systems_type")=>"String", Symbol("pricecap")=>"Float64", Symbol("eligible_zones")=>"Vector{Int64}", Symbol("internal")=>"InfrastructureSystemsInternal", Symbol("co_2_max_tons_mwh")=>"Float64", Symbol("ext")=>"Dict", Symbol("co_2_max_mtons")=>"Float64", Symbol("available")=>"Bool", )
OpenAPI.property_type(::Type{ CarbonCaps }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CarbonCaps[name]))}

function check_required(o::CarbonCaps)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CarbonCaps }, name::Symbol, val)
end
