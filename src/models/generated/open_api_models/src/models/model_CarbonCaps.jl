# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""CarbonCaps

    CarbonCaps(;
        name=nothing,
        id=nothing,
        available=nothing,
        power_systems_type=nothing,
        eligible_zones=nothing,
        co_2_max_tons_mwh=1e8,
        co_2_max_mtons=nothing,
        pricecap=1e8,
    )

    - name::String
    - id::Int64
    - available::Bool
    - power_systems_type::String
    - eligible_zones::Vector{Int64}
    - co_2_max_tons_mwh::Float64
    - co_2_max_mtons::Float64
    - pricecap::Float64
"""
Base.@kwdef mutable struct CarbonCaps <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    eligible_zones::Union{Nothing, Vector{Int64}} = nothing
    co_2_max_tons_mwh::Union{Nothing, Float64} = 1e8
    co_2_max_mtons::Union{Nothing, Float64} = nothing
    pricecap::Union{Nothing, Float64} = 1e8

    function CarbonCaps(
        name,
        id,
        available,
        power_systems_type,
        eligible_zones,
        co_2_max_tons_mwh,
        co_2_max_mtons,
        pricecap,
    )
        OpenAPI.validate_property(CarbonCaps, Symbol("name"), name)
        OpenAPI.validate_property(CarbonCaps, Symbol("id"), id)
        OpenAPI.validate_property(CarbonCaps, Symbol("available"), available)
        OpenAPI.validate_property(
            CarbonCaps,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(CarbonCaps, Symbol("eligible_zones"), eligible_zones)
        OpenAPI.validate_property(
            CarbonCaps,
            Symbol("co_2_max_tons_mwh"),
            co_2_max_tons_mwh,
        )
        OpenAPI.validate_property(CarbonCaps, Symbol("co_2_max_mtons"), co_2_max_mtons)
        OpenAPI.validate_property(CarbonCaps, Symbol("pricecap"), pricecap)
        return new(
            name,
            id,
            available,
            power_systems_type,
            eligible_zones,
            co_2_max_tons_mwh,
            co_2_max_mtons,
            pricecap,
        )
    end
end # type CarbonCaps

const _property_types_CarbonCaps = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("power_systems_type") => "String",
    Symbol("eligible_zones") => "Vector{Int64}",
    Symbol("co_2_max_tons_mwh") => "Float64",
    Symbol("co_2_max_mtons") => "Float64",
    Symbol("pricecap") => "Float64",
)
OpenAPI.property_type(::Type{CarbonCaps}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_CarbonCaps[name]))}

function check_required(o::CarbonCaps)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{CarbonCaps}, name::Symbol, val) end
