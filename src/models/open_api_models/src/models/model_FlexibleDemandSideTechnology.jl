# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""FlexibleDemandSideTechnology

    FlexibleDemandSideTechnology(;
        name=nothing,
        id=nothing,
        available=nothing,
        region=nothing,
        power_systems_type=nothing,
        max_demand_delay=nothing,
        max_demand_advance=nothing,
        demand_energy_efficiency=nothing,
        variable_cost_per_mwh=nothing,
        min_power=nothing,
    )

    - name::String
    - id::Int64
    - available::Bool
    - region::Vector{Int64}
    - power_systems_type::String
    - max_demand_delay::Float64
    - max_demand_advance::Float64
    - demand_energy_efficiency::Float64
    - variable_cost_per_mwh::ValueCurve
    - min_power::Float64
"""
Base.@kwdef mutable struct FlexibleDemandSideTechnology <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    region::Union{Nothing, Vector{Int64}} = nothing
    power_systems_type::Union{Nothing, String} = nothing
    max_demand_delay::Union{Nothing, Float64} = nothing
    max_demand_advance::Union{Nothing, Float64} = nothing
    demand_energy_efficiency::Union{Nothing, Float64} = nothing
    variable_cost_per_mwh = nothing # spec type: Union{ Nothing, ValueCurve }
    min_power::Union{Nothing, Float64} = nothing

    function FlexibleDemandSideTechnology(
        name,
        id,
        available,
        region,
        power_systems_type,
        max_demand_delay,
        max_demand_advance,
        demand_energy_efficiency,
        variable_cost_per_mwh,
        min_power,
    )
        OpenAPI.validate_property(FlexibleDemandSideTechnology, Symbol("name"), name)
        OpenAPI.validate_property(FlexibleDemandSideTechnology, Symbol("id"), id)
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("available"),
            available,
        )
        OpenAPI.validate_property(FlexibleDemandSideTechnology, Symbol("region"), region)
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("power_systems_type"),
            power_systems_type,
        )
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("max_demand_delay"),
            max_demand_delay,
        )
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("max_demand_advance"),
            max_demand_advance,
        )
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("demand_energy_efficiency"),
            demand_energy_efficiency,
        )
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("variable_cost_per_mwh"),
            variable_cost_per_mwh,
        )
        OpenAPI.validate_property(
            FlexibleDemandSideTechnology,
            Symbol("min_power"),
            min_power,
        )
        return new(
            name,
            id,
            available,
            region,
            power_systems_type,
            max_demand_delay,
            max_demand_advance,
            demand_energy_efficiency,
            variable_cost_per_mwh,
            min_power,
        )
    end
end # type FlexibleDemandSideTechnology

const _property_types_FlexibleDemandSideTechnology = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("region") => "Vector{Int64}",
    Symbol("power_systems_type") => "String",
    Symbol("max_demand_delay") => "Float64",
    Symbol("max_demand_advance") => "Float64",
    Symbol("demand_energy_efficiency") => "Float64",
    Symbol("variable_cost_per_mwh") => "ValueCurve",
    Symbol("min_power") => "Float64",
)
OpenAPI.property_type(::Type{FlexibleDemandSideTechnology}, name::Symbol) = Union{
    Nothing,
    eval(Base.Meta.parse(_property_types_FlexibleDemandSideTechnology[name])),
}

function check_required(o::FlexibleDemandSideTechnology)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.power_systems_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{FlexibleDemandSideTechnology}, name::Symbol, val)
end
