# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ColocatedSupplyStorageTechnology

    ColocatedSupplyStorageTechnology(;
        name=nothing,
        id=nothing,
        supply_technology=nothing,
        storage_technology=nothing,
        maximum_inverter_capacity=nothing,
        minimum_inverter_capacity=nothing,
        capital_costs_inverter=nothing,
        operation_costs_inverter=nothing,
        inverter_efficiency=nothing,
        inverter_supply_ratio=nothing,
    )

    - name::String
    - id::Int64
    - supply_technology::Int64
    - storage_technology::Int64
    - maximum_inverter_capacity::Float64
    - minimum_inverter_capacity::Float64
    - capital_costs_inverter::ValueCurve
    - operation_costs_inverter::ProductionVariableCostCurve
    - inverter_efficiency::Float64
    - inverter_supply_ratio::Float64
"""
Base.@kwdef mutable struct ColocatedSupplyStorageTechnology <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    supply_technology::Union{Nothing, Int64} = nothing
    storage_technology::Union{Nothing, Int64} = nothing
    maximum_inverter_capacity::Union{Nothing, Float64} = nothing
    minimum_inverter_capacity::Union{Nothing, Float64} = nothing
    capital_costs_inverter = nothing # spec type: Union{ Nothing, ValueCurve }
    operation_costs_inverter = nothing # spec type: Union{ Nothing, ProductionVariableCostCurve }
    inverter_efficiency::Union{Nothing, Float64} = nothing
    inverter_supply_ratio::Union{Nothing, Float64} = nothing

    function ColocatedSupplyStorageTechnology(name, id, supply_technology, storage_technology, maximum_inverter_capacity, minimum_inverter_capacity, capital_costs_inverter, operation_costs_inverter, inverter_efficiency, inverter_supply_ratio, )
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("name"), name)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("id"), id)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("supply_technology"), supply_technology)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("storage_technology"), storage_technology)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("maximum_inverter_capacity"), maximum_inverter_capacity)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("minimum_inverter_capacity"), minimum_inverter_capacity)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("capital_costs_inverter"), capital_costs_inverter)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("operation_costs_inverter"), operation_costs_inverter)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("inverter_efficiency"), inverter_efficiency)
        OpenAPI.validate_property(ColocatedSupplyStorageTechnology, Symbol("inverter_supply_ratio"), inverter_supply_ratio)
        return new(name, id, supply_technology, storage_technology, maximum_inverter_capacity, minimum_inverter_capacity, capital_costs_inverter, operation_costs_inverter, inverter_efficiency, inverter_supply_ratio, )
    end
end # type ColocatedSupplyStorageTechnology

const _property_types_ColocatedSupplyStorageTechnology = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("id")=>"Int64", Symbol("supply_technology")=>"Int64", Symbol("storage_technology")=>"Int64", Symbol("maximum_inverter_capacity")=>"Float64", Symbol("minimum_inverter_capacity")=>"Float64", Symbol("capital_costs_inverter")=>"ValueCurve", Symbol("operation_costs_inverter")=>"ProductionVariableCostCurve", Symbol("inverter_efficiency")=>"Float64", Symbol("inverter_supply_ratio")=>"Float64", )
OpenAPI.property_type(::Type{ ColocatedSupplyStorageTechnology }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ColocatedSupplyStorageTechnology[name]))}

function check_required(o::ColocatedSupplyStorageTechnology)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ColocatedSupplyStorageTechnology }, name::Symbol, val)










end
